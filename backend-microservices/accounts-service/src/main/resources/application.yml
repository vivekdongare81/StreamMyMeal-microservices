server:
  port: 8081

spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:postgresql://localhost:8084/accountsdb #fallback -gets Overidden when used docker-compose by accounts:8084
    driver-class-name: org.postgresql.Driver
    username: root
    password: root

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true

  config:
    import: "optional:configserver:http://localhost:8090/" #fallback -gets Overidden when used docker-compose by configserver:8090
  
  cloud:
    openfeign:  # Set Circut Breaker for Feign Client
      circuitbreaker:
        enabled: true
    function:   # Async Messaging thru Broker
      definition: updateCommunication
      
    stream:
      defaultBinder: kafka   # âœ… Tell Spring to use Kafka, not RabbitMQ as we have both
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication
          
      kafka: #Kafka as a Messaging broker
        binder:
          brokers:
            - localhost:9092        
  rabbitmq:
    host: localhost  #RabbitMQ for RateLimiting fallback
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
      
eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8092/eureka/ #fallback
      
info: #Actuator
  app:
    name: "accounts"
    description: "Accounts Microservice"
    version: "1.0.0"
 
logging:
  level:
    com:
      devsoncall:
        accounts: DEBUG
  pattern: #OpenTelemetry
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1
