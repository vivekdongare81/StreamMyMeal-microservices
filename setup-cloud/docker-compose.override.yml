version: '3.8'

services:
  ###################  Infrastructure Services ########################
  
  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: redis-ms
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - stream-network

  # PostgreSQL Database
  postgres:
    image: postgres:16.3
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: streammymeal
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stream-network

  # Kafka with Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - stream-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - stream-network

  ###################  Application Services ########################

  # Eureka Discovery Service
  discovery-service:
    build:
      context: ../discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      - redis
      - postgres
    networks:
      - stream-network

  # API Gateway
  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    networks:
      - stream-network

  # User Service
  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/streammymeal
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8081"
    depends_on:
      - discovery-service
      - postgres
      - kafka
    networks:
      - stream-network

  # Restaurant Service
  restaurant-service:
    build:
      context: ../restaurant-service
      dockerfile: Dockerfile
    container_name: restaurant-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/streammymeal
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8082"
    depends_on:
      - discovery-service
      - postgres
      - kafka
    networks:
      - stream-network

  # Order Service
  order-service:
    build:
      context: ../order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/streammymeal
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8083"
    depends_on:
      - discovery-service
      - postgres
      - kafka
      - user-service
      - restaurant-service
    networks:
      - stream-network

  # Payment Service
  payment-service:
    build:
      context: ../payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/streammymeal
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8084:8084"
    depends_on:
      - discovery-service
      - postgres
      - kafka
    networks:
      - stream-network

  # Live Streaming Service
  live-streaming-service:
    build:
      context: ../live-streaming-service
      dockerfile: Dockerfile
    container_name: live-streaming-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8085:8085"
      - "1935:1935"  # RTMP
      - "8000:8000"  # HLS
    depends_on:
      - discovery-service
      - kafka
    networks:
      - stream-network

  # Notification Service
  notification-service:
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      SPRING_PROFILES_ACTIVE: local
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
    ports:
      - "8086:8086"
    depends_on:
      - discovery-service
      - kafka
      - redis
    networks:
      - stream-network

  # Frontend Application
  frontend-app:
    build:
      context: ../frontend-app
      dockerfile: Dockerfile
    container_name: frontend-app
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - stream-network
    environment:
      # Kraft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      
      # ADVERTISED Listners default
      # KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      
      # Kafka local - 9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:29092 #9092

      # Kafka docker - 9092
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

      # Kafka docker + local - 9092 9093
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT://localhost:9093

      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

    extends:
      file: common-config.yml
      service: network-deploy-service
      
###################  Users DB SERVICE ########################
  allinoneDB: 
    container_name: allinoneDB
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    extends:
      file: common-config.yml
      service: microservice-db-config
    volumes:
    - ./init-multiple-dbs.sql:/docker-entrypoint-initdb.d/init.sql

 ###################  Others ########################

volumes: 
  kafka_data:
    driver: local
    
networks:
  devsoncallNetwork: #NETWORK name inside docker
    driver: "bridge"