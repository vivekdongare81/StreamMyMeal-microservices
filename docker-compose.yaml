version: "3.8"

services:

## Git server for configuring

  configserver:
   container_name: configserver
   build: config-server
   ports:
     - "8084:8084"
   environment:
     EUREAK_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka/
   depends_on:
     - discovery
   networks:
     - javanet

# Eureka Service Registry

  discovery:
    container_name: discovery
    build: discovery
    ports:
      - "8761:8761"
    networks:
      - javanet

  restaurants:
    container_name: restaurants
    build: restaurants
    ports:
      - "8083:8083"
    environment:
      SPRING_DATA_MONGODB_HOST: restaurantsdb
      SPRING_PROFILES_ACTIVE: prod
    links:
      - configserver
      - restaurantsdb
    depends_on:
      - configserver
      - restaurantsdb
    networks:
      - javanet

  restaurantsdb:
    image: mongo
    container_name: restaurantsdb
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db
    networks:
      - javanet

  products:
    container_name: products
    build: products
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://userspgsql:5432/userdb
      SPRING_PROFILES_ACTIVE: prod
    links:
      - configserver
      - discovery
    depends_on:
     - configserver
      - productsdb
    networks:
      - javanet

  productsdb:
    image: redis:alpine
    restart: unless-stopped
    container_name: productsdb
    ports:
      - 6379:6379
    networks:
      - javanet

  orders:
    container_name: orders
    build: orders
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://userspgsql:5432/userdb
      SPRING_PROFILES_ACTIVE: prod
    links:
      - configserver
      - discovery
    depends_on:
      - configserver
      - userspgsql
    networks:
      - javanet

  orderdb:
    image: postgres
    container_name: orderdb
    restart: unless-stopped
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Qwertz123
      - POSTGRES_DB=orderdb
    ports:
      - 5433:5433
    command: -p 5433
    volumes:
      - postgresdata_orders:/var/lib/postgresql/data/
    networks:
      - javanet

  delivery:
    container_name: delivery
    build: delivery
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://orderdb:5432/userdb
      SPRING_PROFILES_ACTIVE: prod
    links:
      - configserver
      - discovery
    depends_on:
      - configserver
      - orderdb
    networks:
      - javanet

  deliveriesdb:
    image: mongo
    container_name: deliveriesdb
    restart: unless-stopped
    ports:
      - 27018:27018
    volumes:
      - mongodata:/data/db
    networks:
      - javanet

  users:
    container_name: users
    build: users
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://userspgsql:5432/userdb
      SPRING_PROFILES_ACTIVE: prod
    links:
      - configserver
      - discovery
    depends_on:
      - configserver
      - userspgsql
    networks:
      - javanet

  userspgsql:
    image: postgres
    container_name: userspgsql
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Qwertz123
      - POSTGRES_DB=userdb
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - postgresdata:/var/lib/postgresql/data/
    networks:
      - javanet

# Other usefull containers

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
     - PGADMIN_DEFAULT_EMAIL=admin@aspnetrun.com
     - PGADMIN_DEFAULT_PASSWORD=Qwertz123
    restart: unless-stopped
    ports:
     - 5050:80
    volumes:
     - pgadmindata:/root/.pgadmin
    networks:
     - javanet

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411


  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - prometheusData:/data/prometheus

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - prometheusData:/data/grafana

  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - 2181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data # for Data
      - zookeeper-logs:/var/lib/zookeeper/log # for transaction logs

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    environment:
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orderTopic"
    ports:
     - 9092:9094
    volumes:
     - kafka-data:/var/lib/kafka/data

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    ports:
      - 8080:8000
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainerdata:/data

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearchdata:/usr/share/elasticsearch/data
    networks:
      - javanet

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.1
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - javanet

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.13.0
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - elasticsearch
    networks:
      - javanet

volumes:
  mongodata:
  postgresdata:
  pgadmindata:
  postgresdata_orders:
  prometheusData:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  elasticsearchdata:

networks:
  javanet:
    driver: bridge
